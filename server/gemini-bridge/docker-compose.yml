# Docker Compose Configuration for Gemini Advanced Bridge Server
# Production-ready deployment setup

version: '3.8'

services:
  # Gemini Advanced Bridge Server
  gemini-bridge:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: gemini-bridge-server
    restart: unless-stopped
    ports:
      - "${BRIDGE_PORT:-3001}:3001"
    environment:
      - NODE_ENV=production
      - BRIDGE_HOST=0.0.0.0
      - BRIDGE_PORT=3001
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:5173,http://localhost:3000}
      - GEMINI_ENDPOINTS=${GEMINI_ENDPOINTS:-http://gemini-mcp:8000}
      - REQUIRE_API_KEY=${REQUIRE_API_KEY:-false}
      - API_KEY=${API_KEY:-}
    volumes:
      # Persistent storage for logs and data
      - bridge-logs:/app/logs
      - bridge-data:/app/data
      # Optional: Mount config file for advanced configuration
      - ./config.production.js:/app/config.js:ro
    networks:
      - fantasy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - gemini-mcp
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bridge.rule=Host(`bridge.localhost`)"
      - "traefik.http.routers.bridge.entrypoints=web"
      - "traefik.http.services.bridge.loadbalancer.server.port=3001"

  # Gemini Advanced MCP Server (placeholder - replace with actual implementation)
  gemini-mcp:
    image: gemini-mcp:latest  # Replace with actual Gemini MCP image
    container_name: gemini-mcp-server
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - MCP_PORT=8000
      - MCP_HOST=0.0.0.0
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - gemini-data:/app/data
      - gemini-models:/app/models
    networks:
      - fantasy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mcp.rule=Host(`mcp.localhost`)"
      - "traefik.http.routers.mcp.entrypoints=web"

  # Redis for caching (optional but recommended for production)
  redis:
    image: redis:7-alpine
    container_name: gemini-bridge-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - fantasy-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: gemini-bridge-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    networks:
      - fantasy-network
    depends_on:
      - gemini-bridge
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`fantasy.localhost`)"
      - "traefik.http.routers.nginx.entrypoints=web"

  # Traefik reverse proxy (alternative to nginx)
  traefik:
    image: traefik:v2.10
    container_name: gemini-bridge-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "8080:8080"  # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/traefik.yml:ro
    networks:
      - fantasy-network
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--metrics.prometheus=true"

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: gemini-bridge-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - fantasy-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: gemini-bridge-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - fantasy-network
    depends_on:
      - prometheus

# Networks
networks:
  fantasy-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Volumes for persistent data
volumes:
  bridge-logs:
    driver: local
  bridge-data:
    driver: local
  gemini-data:
    driver: local
  gemini-models:
    driver: local
  redis-data:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Development override (use with docker-compose -f docker-compose.yml -f docker-compose.dev.yml up)
---
# docker-compose.dev.yml (save as separate file)
version: '3.8'

services:
  gemini-bridge:
    build:
      target: builder
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug
    volumes:
      # Mount source code for development
      - .:/app
      - /app/node_modules
    ports:
      - "3001:3001"
      - "9229:9229"  # Node.js debugger
    command: ["npm", "run", "dev"]
    restart: "no"

  # Remove production services not needed in development
  nginx: null
  traefik: null
  prometheus: null
  grafana: null